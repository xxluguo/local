<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.ProviderMapper">
    <resultMap id="providerList" type="Provider">
        <result property="id" column="id"/>
        <result property="proCode" column="proCode"/>
        <result property="proName" column="proName"/>
        <result property="proContact" column="proContact"/>
        <result property="proName" column="proName"/>
    </resultMap>
    <resultMap id="withProvider" type="Provider">
        <id column="id" property="id"/>
        <result column="proCode" property="proCode"/>
        <result column="proName" property="proName"/>
        <result column="proContact" property="proContact"/>
        <!--封装用户信息，需要描述集合里面的元素数据类型是什么-->
        <collection property="billsList" ofType="Bill">
<!--            <id column="billCode" property="billCode"/>-->
            <result column="billCode" property="billCode"/>
            <result column="productName" property="productName"/>
            <result column="totalPrice" property="totalPrice"/>
            <result column="isPayment" property="isPayment"/>


        </collection>
    </resultMap>
    <select id="findAll" resultMap="providerList">
         select * from smbms_provider
    </select>
    <!--按照createby插入一条信息-->
    <insert id="addProvider" parameterType="Provider">
        insert into smbms_provider(proCode, proName, proDesc, proContact,createdBy,creationDate)
        values (#{proCode},#{proName},#{proDesc},#{proContact},#{createdBy},#{creationDate})
    </insert>
    <update id="updateProvider" parameterType="Provider">
        update smbms_provider
        set modifyDate=#{modifyDate},modifyBy=#{modifyBy}
        where id=#{id}
    </update>
    <delete id="deleteProvider" parameterType="int">
        delete from smbms_provider where id=#{id}
    </delete>
    <select id="queryWithId" resultMap="withProvider">
        select p.id id,proCode,proName,proContact,proPhone, b.billCode , b.productName,totalPrice,isPayment
        from smbms_provider p , smbms_bill b
        where p.id = b.providerId
        and p.id = #{id}
    </select>
    <select id="queryWithIdtwo" resultMap="withProvider">
        select p.id id,proCode,proName,proContact,proPhone, b.billCode , b.productName,totalPrice,isPayment
        from smbms_provider p , smbms_bill b
        <where>
            <if test="id!=null and id!=''">
                and p.id = #{id}
            </if>
        </where>
        and p.id = #{id}
    </select>
    <update id="updateProviderTwo" parameterType="Provider">
        update smbms_provider
        <set>
            <if test="modifyDate!=null">
<!--            <if test="id!=null">-->
                modifyDate=#{modifyDate},
            </if>
            <if test="modifyBy!=null">
<!--            <if test="id!=null">-->
                modifyBy=#{modifyBy},
            </if>

        </set>
        where id=#{id}
    </update>
    <update id="updateProviderThree" parameterType="Provider">
        update smbms_provider
        <trim prefix="set" suffixOverrides="," suffix="where id=#{id} ">
            <if test="modifyDate!=null">
                <!--            <if test="id!=null">-->
                modifyDate=#{modifyDate},
            </if>
            <if test="modifyBy!=null">
                <!--            <if test="id!=null">-->
                modifyBy=#{modifyBy},
            </if>

        </trim>
    </update>
    <select id="queryWithIdThree"  resultMap="dao.BillMapper.billList">
--         select p.id id,proCode,proName,proContact,proPhone, b.billCode , b.productName,totalPrice,isPayment
        select *
        from smbms_bill
        where providerId
        in
        <foreach collection="array" item="billids" open="(" separator="," close=")">
            #{billids}
        </foreach>
    </select>
    <select id="queryProviderWithChoose" resultMap="providerList">
        select * from smbms_provider
        <where>
            <choose>
                <when test="id!=null and id!=''">
                    and id = #{id}
                </when>
                <when test="proCode!=null and proCode!=''">
                    and proCode = #{proCode}
                </when>
                <when test="proName!=null and proName!=''">
                    and proName like CONCAT ('%',#{proName},'%')
                </when>
                <otherwise>
                    and YEAR(creationDate) = YEAR(#{creationDate})
                </otherwise>
            </choose>
        </where>
    </select>




</mapper>